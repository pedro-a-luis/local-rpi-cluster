---
# Ansible Playbook: Install Redis in K3s Cluster
#
# This playbook installs Redis as a shared service for multiple applications.
#
# Usage:
#   ansible-playbook ansible/playbooks/redis-install.yml
#
# Requirements:
#   - kubectl configured
#   - Longhorn storage class available

- name: Install Redis in K3s Cluster
  hosts: localhost
  gather_facts: no
  vars:
    redis_namespace: "redis"
    redis_storage_size: "5Gi"
    redis_memory_limit: "512Mi"
    redis_cpu_limit: "500m"

  tasks:
    - name: Create Redis namespace
      ansible.builtin.command:
        cmd: kubectl create namespace {{ redis_namespace }}
      register: namespace_create
      changed_when: namespace_create.rc == 0
      failed_when: namespace_create.rc != 0 and 'already exists' not in namespace_create.stderr

    - name: Deploy Redis
      ansible.builtin.shell: |
        cat <<EOF | kubectl apply -f -
        ---
        # Redis PersistentVolumeClaim
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: redis-pvc
          namespace: {{ redis_namespace }}
        spec:
          accessModes:
          - ReadWriteOnce
          storageClassName: longhorn
          resources:
            requests:
              storage: {{ redis_storage_size }}
        ---
        # Redis Deployment
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: redis
          namespace: {{ redis_namespace }}
          labels:
            app: redis
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: redis
          template:
            metadata:
              labels:
                app: redis
            spec:
              containers:
              - name: redis
                image: redis:7-alpine
                ports:
                - containerPort: 6379
                  name: redis
                resources:
                  requests:
                    memory: "256Mi"
                    cpu: "100m"
                  limits:
                    memory: "{{ redis_memory_limit }}"
                    cpu: "{{ redis_cpu_limit }}"
                volumeMounts:
                - name: redis-data
                  mountPath: /data
                - name: redis-config
                  mountPath: /usr/local/etc/redis
                command:
                - redis-server
                - /usr/local/etc/redis/redis.conf
                livenessProbe:
                  tcpSocket:
                    port: 6379
                  initialDelaySeconds: 30
                  periodSeconds: 10
                readinessProbe:
                  exec:
                    command:
                    - redis-cli
                    - ping
                  initialDelaySeconds: 5
                  periodSeconds: 5
              volumes:
              - name: redis-data
                persistentVolumeClaim:
                  claimName: redis-pvc
              - name: redis-config
                configMap:
                  name: redis-config
        ---
        # Redis ConfigMap
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: redis-config
          namespace: {{ redis_namespace }}
        data:
          redis.conf: |
            # Redis Configuration for Kubernetes
            bind 0.0.0.0
            protected-mode no
            port 6379

            # Persistence
            appendonly yes
            appendfsync everysec
            save 900 1
            save 300 10
            save 60 10000

            # Memory Management
            maxmemory 256mb
            maxmemory-policy allkeys-lru

            # Logging
            loglevel notice

            # Performance
            tcp-backlog 511
            timeout 0
            tcp-keepalive 300
        ---
        # Redis Service
        apiVersion: v1
        kind: Service
        metadata:
          name: redis
          namespace: {{ redis_namespace }}
          labels:
            app: redis
        spec:
          type: ClusterIP
          ports:
          - port: 6379
            targetPort: 6379
            protocol: TCP
            name: redis
          selector:
            app: redis
        EOF
      register: redis_deploy

    - name: Wait for Redis to be ready
      ansible.builtin.command:
        cmd: kubectl wait --for=condition=available --timeout=300s deployment/redis -n {{ redis_namespace }}
      register: redis_ready
      ignore_errors: yes

    - name: Get Redis pod status
      ansible.builtin.command:
        cmd: kubectl get pods -n {{ redis_namespace }}
      register: redis_pods

    - name: Display Redis pods
      ansible.builtin.debug:
        msg: "{{ redis_pods.stdout_lines }}"

    - name: Get Redis service
      ansible.builtin.command:
        cmd: kubectl get svc -n {{ redis_namespace }}
      register: redis_service

    - name: Display Redis service
      ansible.builtin.debug:
        msg: "{{ redis_service.stdout_lines }}"

    - name: Test Redis connection
      ansible.builtin.shell: |
        kubectl run redis-test --rm -i --restart=Never --image=redis:7-alpine -n {{ redis_namespace }} -- redis-cli -h redis.{{ redis_namespace }}.svc.cluster.local ping
      register: redis_test
      ignore_errors: yes

    - name: Display Redis test result
      ansible.builtin.debug:
        msg: "Redis test: {{ redis_test.stdout }}"

    - name: Display installation summary
      ansible.builtin.debug:
        msg:
          - "========================================"
          - "Redis Installation Complete!"
          - "========================================"
          - "Redis is now available as a shared service"
          - ""
          - "Connection string for other applications:"
          - "  redis://redis.{{ redis_namespace }}.svc.cluster.local:6379"
          - ""
          - "From same namespace:"
          - "  redis://redis.{{ redis_namespace }}.svc.cluster.local:6379"
          - ""
          - "From different namespace:"
          - "  redis://redis.{{ redis_namespace }}.svc.cluster.local:6379"
          - ""
          - "To check status:"
          - "  kubectl get pods -n {{ redis_namespace }}"
          - "  kubectl logs -n {{ redis_namespace }} -l app=redis"
          - ""
          - "To test connection:"
          - "  kubectl run redis-test --rm -i --restart=Never --image=redis:7-alpine -n {{ redis_namespace }} -- redis-cli -h redis.{{ redis_namespace }}.svc.cluster.local ping"
