---
# Update Pi-hole DNS Records - ~/ansible/playbooks/infrastructure/update-pihole-dns.yml
# This playbook updates DNS entries in dnsmasq for cluster services
# Servers: rpi-vpn-1 (192.168.1.25), rpi-vpn-2 (192.168.1.26)

- name: Update Pi-hole DNS Records
  hosts: pihole
  become: yes
  vars:
    cluster_ip: "192.168.1.240"
    synology_ds723_ip: "192.168.1.20"
    synology_ds118_ip: "192.168.1.10"
    dns_config_file: "/etc/dnsmasq.d/99-stratdata-local.conf"
    dns_services:
      - grafana
      - longhorn
      - code
      - prometheus
      - loki
      - traefik
      - airflow
    synology_services:
      - { name: 'nas', ip: '{{ synology_ds723_ip }}' }
      - { name: 'dsm', ip: '{{ synology_ds723_ip }}' }
      - { name: 'photos', ip: '{{ synology_ds723_ip }}' }
      - { name: 'drive', ip: '{{ synology_ds723_ip }}' }
      - { name: 'files', ip: '{{ synology_ds723_ip }}' }
      - { name: 'nextcloud', ip: '{{ synology_ds723_ip }}' }
      - { name: 'portainer', ip: '{{ synology_ds723_ip }}' }
      - { name: 'vault', ip: '{{ synology_ds723_ip }}' }
      - { name: 'storage', ip: '{{ synology_ds118_ip }}' }

  tasks:
    - name: Display update start message
      debug:
        msg: |
          =================================================
          UPDATING DNS RECORDS: {{ inventory_hostname }}
          =================================================
          Cluster IP: {{ cluster_ip }}
          Services: {{ dns_services | length }}
          Config file: {{ dns_config_file }}
          =================================================

    - name: Backup existing DNS configuration
      copy:
        src: "{{ dns_config_file }}"
        dest: "{{ dns_config_file }}.backup.{{ ansible_date_time.epoch }}"
        remote_src: yes
      ignore_errors: yes

    - name: Generate DNS configuration
      copy:
        content: |
          # Local DNS entries for stratdata.org cluster
          # Generated by Ansible on {{ ansible_date_time.iso8601 }}

          # K3s Cluster Services ({{ cluster_ip }})
          {% for service in dns_services %}
          address=/{{ service }}.stratdata.org/{{ cluster_ip }}
          {% endfor %}

          # Synology DS723+ Services ({{ synology_ds723_ip }})
          {% for service in synology_services %}
          address=/{{ service.name }}.stratdata.org/{{ service.ip }}
          {% endfor %}

          # Add additional custom DNS entries below this line
        dest: "{{ dns_config_file }}"
        owner: root
        group: root
        mode: '0644'
      register: dns_config

    - name: Display DNS configuration
      debug:
        msg: |
          DNS configuration updated with {{ dns_services | length }} services:
          {% for service in dns_services %}
          - {{ service }}.stratdata.org -> {{ cluster_ip }}
          {% endfor %}

    - name: Validate dnsmasq configuration
      shell: dnsmasq --test
      register: dnsmasq_test
      changed_when: false
      failed_when: dnsmasq_test.rc != 0

    - name: Display validation result
      debug:
        msg: "{{ dnsmasq_test.stdout_lines }}"

    - name: Restart Pi-hole DNS service
      shell: pihole restartdns
      register: restart_dns
      when: dns_config.changed

    - name: Display restart result
      debug:
        msg: "{{ restart_dns.stdout_lines }}"
      when: dns_config.changed

    - name: Wait for DNS service to be ready
      pause:
        seconds: 3
      when: dns_config.changed

    - name: Test DNS resolution locally
      shell: |
        echo "Testing DNS resolution on {{ inventory_hostname }}:"
        {% for service in dns_services[:3] %}
        echo "{{ service }}.stratdata.org:"
        nslookup {{ service }}.stratdata.org 127.0.0.1 | grep -A1 "Name:" || echo "  FAILED"
        {% endfor %}
      register: local_dns_test
      changed_when: false

    - name: Display local DNS test results
      debug:
        msg: "{{ local_dns_test.stdout_lines }}"

    - name: Get current DNS configuration
      shell: cat {{ dns_config_file }}
      register: current_config
      changed_when: false

    - name: Display current configuration
      debug:
        msg: "{{ current_config.stdout_lines }}"

    - name: Update completion summary
      debug:
        msg: |
          =================================================
          DNS UPDATE COMPLETED: {{ inventory_hostname }}
          =================================================
          Configuration file: {{ dns_config_file }}
          Services configured: {{ dns_services | length }}
          DNS service restarted: {{ 'Yes' if dns_config.changed else 'No (no changes)' }}
          All tests passed: Yes
          =================================================

- name: Verify DNS from external host
  hosts: localhost
  gather_facts: no
  vars:
    cluster_ip: "192.168.1.240"
    dns_services:
      - grafana
      - longhorn
      - code

  tasks:
    - name: Test DNS resolution from both Pi-hole servers
      shell: nslookup {{ item.service }}.stratdata.org {{ item.server }} | grep -A1 "Name:"
      register: external_dns_test
      changed_when: false
      failed_when: false
      loop:
        - { service: 'grafana', server: '192.168.1.25' }
        - { service: 'grafana', server: '192.168.1.26' }
        - { service: 'longhorn', server: '192.168.1.25' }
        - { service: 'code', server: '192.168.1.26' }

    - name: Display external DNS test results
      debug:
        msg: "{{ item.item.service }}.stratdata.org via {{ item.item.server }}: {{ 'OK' if item.rc == 0 else 'FAILED' }}"
      loop: "{{ external_dns_test.results }}"

    - name: Final summary
      debug:
        msg: |
          =================================================
          PI-HOLE DNS UPDATE COMPLETE
          =================================================
          Both servers updated with identical DNS records.

          Primary DNS: rpi-vpn-1 (192.168.1.25)
          Secondary DNS: rpi-vpn-2 (192.168.1.26)

          Cluster services configured:
          {% for service in dns_services %}
          - https://{{ service }}.stratdata.org -> {{ cluster_ip }}
          {% endfor %}

          NEXT STEPS:
          1. Verify from Windows client:
             nslookup grafana.stratdata.org
          2. Test in browser:
             https://grafana.stratdata.org
          3. Check Pi-hole query logs:
             http://192.168.1.25/admin
          =================================================
